# This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).

module GmailApi
  class MessagePart < BaseModel
    # The message part body for this part, which may be empty for container MIME message parts.
    # @return [MessagePartBody]
    attr_accessor :body

    # The filename of the attachment. Only present if this message part represents an attachment.
    # @return [String]
    attr_accessor :filename

    # List of headers on this message part. For the top-level message part, representing the entire message payload, it will contain the standard RFC 2822 email headers such as To, From, and Subject.
    # @return [List of MessagePartHeader]
    attr_accessor :headers

    # The MIME type of the message part.
    # @return [String]
    attr_accessor :mime_type

    # The immutable ID of the message part.
    # @return [String]
    attr_accessor :part_id

    # The child MIME message parts of this part. This only applies to container MIME message parts, for example multipart/*. For non- container MIME message part types, such as text/plain, this field is empty. For more information, see RFC 1521.
    # @return [List of MessagePart]
    attr_accessor :parts

    # A mapping from model property names to API property names
    def self.names
      if @hash.nil?
        @hash = {}
        @hash["body"] = "body"
        @hash["filename"] = "filename"
        @hash["headers"] = "headers"
        @hash["mime_type"] = "mimeType"
        @hash["part_id"] = "partId"
        @hash["parts"] = "parts"
      end
      @hash
    end

    def initialize(body = nil,
                   filename = nil,
                   headers = nil,
                   mime_type = nil,
                   part_id = nil,
                   parts = nil)
      @body = body
      @filename = filename
      @headers = headers
      @mime_type = mime_type
      @part_id = part_id
      @parts = parts
    end

    # Creates an instance of the object from a hash
    def self.from_hash(hash)
      if hash == nil
        nil
      else
        # Extract variables from the hash
        body = MessagePartBody.from_hash(hash["body"]) if hash["body"]
        filename = hash["filename"]
        # Parameter is an array, so we need to iterate through it
        headers = nil
        if hash["headers"] != nil
          headers = Array.new
          hash["headers"].each{|structure| headers << (MessagePartHeader.from_hash(structure) if structure)}
        end
        mime_type = hash["mimeType"]
        part_id = hash["partId"]
        # Parameter is an array, so we need to iterate through it
        parts = nil
        if hash["parts"] != nil
          parts = Array.new
          hash["parts"].each{|structure| parts << (MessagePart.from_hash(structure) if structure)}
        end

        # Create object from extracted values
        MessagePart.new(body,
                        filename,
                        headers,
                        mime_type,
                        part_id,
                        parts)
      end
    end
  end
end
