# This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).

module GmailApi
  class Message < BaseModel
    # The ID of the last history record that modified this message.
    # @return [String]
    attr_accessor :history_id

    # The immutable ID of the message.
    # @return [String]
    attr_accessor :id

    # The internal message creation timestamp (epoch ms), which determines ordering in the inbox. For normal SMTP-received email, this represents the time the message was originally accepted by Google, which is more reliable than the Date header. However, for API-migrated mail, it can be configured by client to be based on the Date header.
    # @return [String]
    attr_accessor :internal_date

    # List of IDs of labels applied to this message.
    # @return [List of String]
    attr_accessor :label_ids

    # The parsed email structure in the message parts.
    # @return [MessagePart]
    attr_accessor :payload

    # The entire email message in an RFC 2822 formatted and base64url encoded string. Returned in messages.get and drafts.get responses when the format=RAW parameter is supplied.
    # @return [String]
    attr_accessor :raw

    # Estimated size in bytes of the message.
    # @return [Integer]
    attr_accessor :size_estimate

    # A short part of the message text.
    # @return [String]
    attr_accessor :snippet

    # The ID of the thread the message belongs to. To add a message or draft to a thread, the following criteria must be met: 
    # - The requested threadId must be specified on the Message or Draft.Message you supply with your request. 
    # - The References and In-Reply-To headers must be set in compliance with the RFC 2822 standard. 
    # - The Subject headers must match.
    # @return [String]
    attr_accessor :thread_id

    # A mapping from model property names to API property names
    def self.names
      if @hash.nil?
        @hash = {}
        @hash["history_id"] = "historyId"
        @hash["id"] = "id"
        @hash["internal_date"] = "internalDate"
        @hash["label_ids"] = "labelIds"
        @hash["payload"] = "payload"
        @hash["raw"] = "raw"
        @hash["size_estimate"] = "sizeEstimate"
        @hash["snippet"] = "snippet"
        @hash["thread_id"] = "threadId"
      end
      @hash
    end

    def initialize(history_id = nil,
                   id = nil,
                   internal_date = nil,
                   label_ids = nil,
                   payload = nil,
                   raw = nil,
                   size_estimate = nil,
                   snippet = nil,
                   thread_id = nil)
      @history_id = history_id
      @id = id
      @internal_date = internal_date
      @label_ids = label_ids
      @payload = payload
      @raw = raw
      @size_estimate = size_estimate
      @snippet = snippet
      @thread_id = thread_id
    end

    # Creates an instance of the object from a hash
    def self.from_hash(hash)
      if hash == nil
        nil
      else
        # Extract variables from the hash
        history_id = hash["historyId"]
        id = hash["id"]
        internal_date = hash["internalDate"]
        label_ids = hash["labelIds"]
        payload = MessagePart.from_hash(hash["payload"]) if hash["payload"]
        raw = hash["raw"]
        size_estimate = hash["sizeEstimate"]
        snippet = hash["snippet"]
        thread_id = hash["threadId"]

        # Create object from extracted values
        Message.new(history_id,
                    id,
                    internal_date,
                    label_ids,
                    payload,
                    raw,
                    size_estimate,
                    snippet,
                    thread_id)
      end
    end
  end
end
