# This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).

module GmailApi
  class HistoryController < BaseController
    @@instance = HistoryController.new
    # Singleton instance of the controller class
    def self.instance
      @@instance
    end

    # Lists the history of all changes to the given mailbox. History results are returned in chronological order (increasing historyId).
    # @param [String] user_id Required parameter: The user's email address. The special value me can be used to indicate the authenticated user.
    # @param [String] alt Optional parameter: Data format for the response. (Acceptable values are: "json")
    # @param [String] fields Optional parameter: Selector specifying which fields to include in a partial response.
    # @param [String] key Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @param [String] label_id Optional parameter: Only return messages with a label matching the ID.
    # @param [Integer] max_results Optional parameter: The maximum number of history records to return.
    # @param [String] oauth_token Optional parameter: OAuth 2.0 token for the current user.
    # @param [String] page_token Optional parameter: Page token to retrieve a specific page of results in the list.
    # @param [Boolean] pretty_print Optional parameter: Returns response with indentations and line breaks.
    # @param [String] quota_user Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    # @param [String] start_history_id Optional parameter: Required. Returns history records after the specified startHistoryId. The supplied startHistoryId should be obtained from the historyId of a message, thread, or previous list response. History IDs increase chronologically but are not contiguous with random gaps in between valid IDs. Supplying an invalid or out of date startHistoryId typically returns an HTTP 404 error code. A historyId is typically valid for at least a week, but in some rare circumstances may be valid for only a few hours. If you receive an HTTP 404 error response, your application should perform a full sync. If you receive no nextPageToken in the response, there are no updates to retrieve and you can store the returned historyId for a future request.
    # @param [String] user_ip Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    # @return ListHistoryResponse response from the API call
    def list(user_id, 
             alt = 'json', 
             fields = nil, 
             key = nil, 
             label_id = nil, 
             max_results = 100, 
             oauth_token = nil, 
             page_token = nil, 
             pretty_print = true, 
             quota_user = nil, 
             start_history_id = nil, 
             user_ip = nil)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/{userId}/history'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'userId' => user_id
      }
      _query_builder = APIHelper.append_url_with_query_parameters _query_builder, {
        'alt' => alt,
        'fields' => fields,
        'key' => key,
        'labelId' => label_id,
        'maxResults' => max_results,
        'oauth_token' => oauth_token,
        'pageToken' => page_token,
        'prettyPrint' => pretty_print,
        'quotaUser' => quota_user,
        'startHistoryId' => start_history_id,
        'userIp' => user_ip
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      OAuth2.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return ListHistoryResponse.from_hash(decoded)
    end
  end
end
