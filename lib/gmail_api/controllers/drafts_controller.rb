# This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).

module GmailApi
  class DraftsController < BaseController
    @@instance = DraftsController.new
    # Singleton instance of the controller class
    def self.instance
      @@instance
    end

    # Replaces a draft's content.
    # @param [Draft] body Required parameter: Example: 
    # @param [String] id Required parameter: The ID of the draft to update.
    # @param [String] user_id Required parameter: The user's email address. The special value me can be used to indicate the authenticated user.
    # @param [String] alt Optional parameter: Data format for the response. (Acceptable values are: "json")
    # @param [String] fields Optional parameter: Selector specifying which fields to include in a partial response.
    # @param [String] key Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @param [String] oauth_token Optional parameter: OAuth 2.0 token for the current user.
    # @param [Boolean] pretty_print Optional parameter: Returns response with indentations and line breaks.
    # @param [String] quota_user Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    # @param [String] user_ip Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    # @return Draft response from the API call
    def update(body, 
               id, 
               user_id, 
               alt = 'json', 
               fields = nil, 
               key = nil, 
               oauth_token = nil, 
               pretty_print = true, 
               quota_user = nil, 
               user_ip = nil)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/{userId}/drafts/{id}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'id' => id,
        'userId' => user_id
      }
      _query_builder = APIHelper.append_url_with_query_parameters _query_builder, {
        'alt' => alt,
        'fields' => fields,
        'key' => key,
        'oauth_token' => oauth_token,
        'prettyPrint' => pretty_print,
        'quotaUser' => quota_user,
        'userIp' => user_ip
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # prepare and execute HttpRequest
      _request = @http_client.put _query_url, headers: _headers, parameters: body.to_json
      OAuth2.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return Draft.from_hash(decoded)
    end

    # Sends the specified, existing draft to the recipients in the To, Cc, and Bcc headers.
    # @param [Draft] body Required parameter: Example: 
    # @param [String] user_id Required parameter: The user's email address. The special value me can be used to indicate the authenticated user.
    # @param [String] alt Optional parameter: Data format for the response. (Acceptable values are: "json")
    # @param [String] fields Optional parameter: Selector specifying which fields to include in a partial response.
    # @param [String] key Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @param [String] oauth_token Optional parameter: OAuth 2.0 token for the current user.
    # @param [Boolean] pretty_print Optional parameter: Returns response with indentations and line breaks.
    # @param [String] quota_user Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    # @param [String] user_ip Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    # @return Message response from the API call
    def create_send(body, 
                    user_id, 
                    alt = 'json', 
                    fields = nil, 
                    key = nil, 
                    oauth_token = nil, 
                    pretty_print = true, 
                    quota_user = nil, 
                    user_ip = nil)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/{userId}/drafts/send'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'userId' => user_id
      }
      _query_builder = APIHelper.append_url_with_query_parameters _query_builder, {
        'alt' => alt,
        'fields' => fields,
        'key' => key,
        'oauth_token' => oauth_token,
        'prettyPrint' => pretty_print,
        'quotaUser' => quota_user,
        'userIp' => user_ip
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # prepare and execute HttpRequest
      _request = @http_client.post _query_url, headers: _headers, parameters: body.to_json
      OAuth2.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return Message.from_hash(decoded)
    end

    # Lists the drafts in the user's mailbox.
    # @param [String] user_id Required parameter: The user's email address. The special value me can be used to indicate the authenticated user.
    # @param [String] alt Optional parameter: Data format for the response. (Acceptable values are: "json")
    # @param [String] fields Optional parameter: Selector specifying which fields to include in a partial response.
    # @param [String] key Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @param [Integer] max_results Optional parameter: Maximum number of drafts to return.
    # @param [String] oauth_token Optional parameter: OAuth 2.0 token for the current user.
    # @param [String] page_token Optional parameter: Page token to retrieve a specific page of results in the list.
    # @param [Boolean] pretty_print Optional parameter: Returns response with indentations and line breaks.
    # @param [String] quota_user Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    # @param [String] user_ip Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    # @return ListDraftsResponse response from the API call
    def list(user_id, 
             alt = 'json', 
             fields = nil, 
             key = nil, 
             max_results = 100, 
             oauth_token = nil, 
             page_token = nil, 
             pretty_print = true, 
             quota_user = nil, 
             user_ip = nil)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/{userId}/drafts'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'userId' => user_id
      }
      _query_builder = APIHelper.append_url_with_query_parameters _query_builder, {
        'alt' => alt,
        'fields' => fields,
        'key' => key,
        'maxResults' => max_results,
        'oauth_token' => oauth_token,
        'pageToken' => page_token,
        'prettyPrint' => pretty_print,
        'quotaUser' => quota_user,
        'userIp' => user_ip
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      OAuth2.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return ListDraftsResponse.from_hash(decoded)
    end

    # Gets the specified draft.
    # @param [String] id Required parameter: The ID of the draft to retrieve.
    # @param [String] user_id Required parameter: The user's email address. The special value me can be used to indicate the authenticated user.
    # @param [String] alt Optional parameter: Data format for the response. (Acceptable values are: "json")
    # @param [String] fields Optional parameter: Selector specifying which fields to include in a partial response.
    # @param [String] format Optional parameter: The format to return the draft in. (Acceptable values are: "full", "metadata", "minimal", "raw")
    # @param [String] key Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @param [String] oauth_token Optional parameter: OAuth 2.0 token for the current user.
    # @param [Boolean] pretty_print Optional parameter: Returns response with indentations and line breaks.
    # @param [String] quota_user Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    # @param [String] user_ip Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    # @return Draft response from the API call
    def get(id, 
            user_id, 
            alt = 'json', 
            fields = nil, 
            format = 'full', 
            key = nil, 
            oauth_token = nil, 
            pretty_print = true, 
            quota_user = nil, 
            user_ip = nil)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/{userId}/drafts/{id}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'id' => id,
        'userId' => user_id
      }
      _query_builder = APIHelper.append_url_with_query_parameters _query_builder, {
        'alt' => alt,
        'fields' => fields,
        'format' => format,
        'key' => key,
        'oauth_token' => oauth_token,
        'prettyPrint' => pretty_print,
        'quotaUser' => quota_user,
        'userIp' => user_ip
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      OAuth2.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return Draft.from_hash(decoded)
    end

    # Immediately and permanently deletes the specified draft. Does not simply trash it.
    # @param [String] id Required parameter: The ID of the draft to delete.
    # @param [String] user_id Required parameter: The user's email address. The special value me can be used to indicate the authenticated user.
    # @param [String] alt Optional parameter: Data format for the response. (Acceptable values are: "json")
    # @param [String] fields Optional parameter: Selector specifying which fields to include in a partial response.
    # @param [String] key Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @param [String] oauth_token Optional parameter: OAuth 2.0 token for the current user.
    # @param [Boolean] pretty_print Optional parameter: Returns response with indentations and line breaks.
    # @param [String] quota_user Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    # @param [String] user_ip Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    # @return void response from the API call
    def delete(id, 
               user_id, 
               alt = 'json', 
               fields = nil, 
               key = nil, 
               oauth_token = nil, 
               pretty_print = true, 
               quota_user = nil, 
               user_ip = nil)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/{userId}/drafts/{id}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'id' => id,
        'userId' => user_id
      }
      _query_builder = APIHelper.append_url_with_query_parameters _query_builder, {
        'alt' => alt,
        'fields' => fields,
        'key' => key,
        'oauth_token' => oauth_token,
        'prettyPrint' => pretty_print,
        'quotaUser' => quota_user,
        'userIp' => user_ip
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare and execute HttpRequest
      _request = @http_client.delete _query_url
      OAuth2.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)
    end

    # Creates a new draft with the DRAFT label.
    # @param [Draft] body Required parameter: Example: 
    # @param [String] user_id Required parameter: The user's email address. The special value me can be used to indicate the authenticated user.
    # @param [String] alt Optional parameter: Data format for the response. (Acceptable values are: "json")
    # @param [String] fields Optional parameter: Selector specifying which fields to include in a partial response.
    # @param [String] key Optional parameter: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    # @param [String] oauth_token Optional parameter: OAuth 2.0 token for the current user.
    # @param [Boolean] pretty_print Optional parameter: Returns response with indentations and line breaks.
    # @param [String] quota_user Optional parameter: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
    # @param [String] user_ip Optional parameter: IP address of the site where the request originates. Use this if you want to enforce per-user limits.
    # @return Draft response from the API call
    def create(body, 
               user_id, 
               alt = 'json', 
               fields = nil, 
               key = nil, 
               oauth_token = nil, 
               pretty_print = true, 
               quota_user = nil, 
               user_ip = nil)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/{userId}/drafts'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'userId' => user_id
      }
      _query_builder = APIHelper.append_url_with_query_parameters _query_builder, {
        'alt' => alt,
        'fields' => fields,
        'key' => key,
        'oauth_token' => oauth_token,
        'prettyPrint' => pretty_print,
        'quotaUser' => quota_user,
        'userIp' => user_ip
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # prepare and execute HttpRequest
      _request = @http_client.post _query_url, headers: _headers, parameters: body.to_json
      OAuth2.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return Draft.from_hash(decoded)
    end
  end
end
